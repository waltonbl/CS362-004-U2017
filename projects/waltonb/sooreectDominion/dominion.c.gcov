        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 103734 returned 100% blocks executed 100%
   103734:    8:int compare(const void* a, const void* b) {
   103734:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 52927 (fallthrough)
branch  1 taken 50807
    52927:   10:    return 1;
    50807:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 50608 (fallthrough)
branch  1 taken 199
    50608:   12:    return -1;
      199:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 94%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
call    0 returned 8
        8:   45:  PutSeed((long)randomSeed);
call    0 returned 8
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 8 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 8
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
branch  0 taken 80
branch  1 taken 8 (fallthrough)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
branch  0 taken 800
branch  1 taken 80 (fallthrough)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 720 (fallthrough)
branch  1 taken 80
branch  2 taken 0 (fallthrough)
branch  3 taken 720
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 7 (fallthrough)
branch  1 taken 1
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        1:   77:  else if (numPlayers == 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 7 (fallthrough)
branch  1 taken 1
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 160
branch  1 taken 8 (fallthrough)
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 1240
branch  1 taken 80 (fallthrough)
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 80 (fallthrough)
branch  1 taken 1160
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 72 (fallthrough)
branch  1 taken 8
branch  2 taken 8 (fallthrough)
branch  3 taken 64
        -:  114:		{
       32:  115:		  if (numPlayers == 2){ 
branch  0 taken 14 (fallthrough)
branch  1 taken 2
       14:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       64:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       26:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 18
branch  1 taken 8 (fallthrough)
        -:  139:    {
       18:  140:      state->deckCount[i] = 0;
       72:  141:      for (j = 0; j < 3; j++)
branch  0 taken 54
branch  1 taken 18 (fallthrough)
        -:  142:	{
       54:  143:	  state->deck[i][j] = estate;
       54:  144:	  state->deckCount[i]++;
        -:  145:	}
      144:  146:      for (j = 3; j < 10; j++)
branch  0 taken 126
branch  1 taken 18 (fallthrough)
        -:  147:	{
      126:  148:	  state->deck[i][j] = copper;
      126:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       26:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 18
branch  1 taken 8 (fallthrough)
        -:  155:    {
       18:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 18
branch  1 taken 0 (fallthrough)
branch  2 taken 18
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       26:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 18
branch  1 taken 8 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       18:  166:      state->handCount[i] = 0;
       18:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 216
branch  1 taken 8 (fallthrough)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
branch  0 taken 40
branch  1 taken 8 (fallthrough)
       40:  193:    drawCard(state->whoseTurn, state);
call    0 returned 40
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 8
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 75 returned 100% blocks executed 100%
       75:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       75:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       75:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 74
        1:  210:    return -1;
       74:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 74
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15051:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 14903
branch  1 taken 74 (fallthrough)
    14903:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 14903
    14903:  216:    newDeck[newDeckPos] = state->deck[player][card];
    14903:  217:    newDeckPos++;
  1212120:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 1197217
branch  1 taken 14903 (fallthrough)
  1197217:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    14903:  221:    state->deckCount[player]--;
        -:  222:  }
    14977:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 14903
branch  1 taken 74 (fallthrough)
    14903:  224:    state->deck[player][i] = newDeck[i];
    14903:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       74:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 8 returned 100% blocks executed 100%
        8:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        8:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        8:  237:  if (state->phase != 0)
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        -:  238:    {
        1:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        7:  243:  if ( state->numActions < 1 )
branch  0 taken 1 (fallthrough)
branch  1 taken 6
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        6:  249:  card = handCard(handPos, state);
call    0 returned 6
        -:  250:	
        -:  251:  //check if selected card is an action
        6:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 5 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 5
        -:  253:    {
        1:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        5:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 5
branch  1 taken 3 (fallthrough)
branch  2 taken 2
        -:  259:    {
        3:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        2:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        2:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 2
        -:  268:	
        2:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 1
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 1
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 6 returned 100% blocks executed 100%
        6:  315:int handCard(int handPos, struct gameState *state) {
        6:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 6
        6:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 4 returned 100% blocks executed 100%
        4:  320:int supplyCount(int card, struct gameState *state) {
        4:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 5 returned 100% blocks executed 100%
        5:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        5:  326:  int count = 0;
        -:  327:
       30:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 25
branch  1 taken 5 (fallthrough)
        -:  329:    {
       25:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 2 (fallthrough)
branch  1 taken 23
        -:  331:    }
        -:  332:
       30:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 25
branch  1 taken 5 (fallthrough)
        -:  334:    {
       25:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 2 (fallthrough)
branch  1 taken 23
        -:  336:    }
        -:  337:
       10:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 5
branch  1 taken 5 (fallthrough)
        -:  339:    {
        5:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 2 (fallthrough)
branch  1 taken 3
        -:  341:    }
        -:  342:
        5:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 6013 returned 100% blocks executed 100%
     6013:  346:int whoseTurn(struct gameState *state) {
     6013:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 38054 returned 100% blocks executed 92%
    38054:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    38054:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 56 (fallthrough)
branch  1 taken 37998
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    14779:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 14723
branch  1 taken 56 (fallthrough)
    14723:  534:      state->deck[player][i] = state->discard[player][i];
    14723:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       56:  538:    state->deckCount[player] = state->discardCount[player];
       56:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       56:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 56
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       56:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       56:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       56:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       56:  559:    if (deckCounter == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 56
    #####:  560:      return -1;
        -:  561:
       56:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       56:  563:    state->deckCount[player]--;
       56:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    37998:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    37998:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    37998:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    37998:  576:    state->deckCount[player]--;
    37998:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    38054:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 3 returned 100% blocks executed 10%
        3:  583:int getCost(int cardNumber)
        -:  584:{
        3:  585:  switch( cardNumber ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 3
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
        3:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 6005 returned 100% blocks executed 12%
     6005:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
     6005:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 6005
     6005:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
     6005:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
     6005:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
     6005:  660:  int z = 0;// this is the counter for the temp hand
     6005:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 1953 (fallthrough)
branch  1 taken 4052
     1953:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     6005:  667:  switch( card ) 
branch  0 taken 2002
branch  1 taken 2001
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 2001
branch  7 taken 1
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  668:    {
        -:  669:    case adventurer:
     2002:  670:		adventurerCard(state, currentPlayer, temphand, drawntreasure, cardDrawn, z);
call    0 returned 2002
     2002:  671:		break;
        -:  672:
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    10005:  675:      for (i = 0; i < 4; i++)
branch  0 taken 8004
branch  1 taken 2001 (fallthrough)
        -:  676:	{
     8004:  677:	  drawCard(currentPlayer, state);
call    0 returned 8004
        -:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
     2001:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    10005:  684:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 8004
branch  1 taken 2001 (fallthrough)
        -:  685:	{
     8004:  686:	  if ( i != currentPlayer )
branch  0 taken 6003 (fallthrough)
branch  1 taken 2001
        -:  687:	    {
     6003:  688:	      drawCard(i, state);
call    0 returned 6003
        -:  689:	    }
        -:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
     2001:  693:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2001
        -:  694:			
     2001:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
    #####:  698:		feastCard(choice1, state, currentPlayer, temphand);
call    0 never executed
    #####:  699:		break;
        -:  700:		
        -:  701:    case gardens:
    #####:  702:      return -1;
        -:  703:			
        -:  704:    case mine:
    #####:  705:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  706:
    #####:  707:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  708:	{
    #####:  709:	  return -1;
        -:  710:	}
        -:  711:		
    #####:  712:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  713:	{
    #####:  714:	  return -1;
        -:  715:	}
        -:  716:
    #####:  717:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  718:	{
    #####:  719:	  return -1;
        -:  720:	}
        -:  721:
    #####:  722:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  723:
        -:  724:      //discard card from hand
    #####:  725:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  726:
        -:  727:      //discard trashed card
    #####:  728:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  729:	{
    #####:  730:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  731:	    {
    #####:  732:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  733:	      break;
        -:  734:	    }
        -:  735:	}
        -:  736:			
    #####:  737:      return 0;
        -:  738:			
        -:  739:    case remodel:
    #####:  740:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  741:
    #####:  742:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  743:	{
    #####:  744:	  return -1;
        -:  745:	}
        -:  746:
    #####:  747:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  748:
        -:  749:      //discard card from hand
    #####:  750:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  751:
        -:  752:      //discard trashed card
    #####:  753:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  754:	{
    #####:  755:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  756:	    {
    #####:  757:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  758:	      break;
        -:  759:	    }
        -:  760:	}
        -:  761:
        -:  762:
    #####:  763:      return 0;
        -:  764:		
        -:  765:    case smithy:
     2001:  766:		smithyCard(state, handPos, currentPlayer);
call    0 returned 2001
     2001:  767:		break;
        -:  768:	
        -:  769:    case village:
        -:  770:      //+1 Card
        1:  771:      drawCard(currentPlayer, state);
call    0 returned 1
        -:  772:			
        -:  773:      //+2 Actions
        1:  774:      state->numActions = state->numActions + 2;
        -:  775:			
        -:  776:      //discard played card from hand
        1:  777:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        1:  778:      return 0;
        -:  779:		
        -:  780:    case baron:
    #####:  781:      state->numBuys++;//Increase buys by 1!
    #####:  782:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  783:	int p = 0;//Iterator for hand!
    #####:  784:	int card_not_discarded = 1;//Flag for discard set!
    #####:  785:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  786:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  787:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  788:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  789:	    state->discardCount[currentPlayer]++;
    #####:  790:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  791:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  792:	    }
    #####:  793:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  794:	    state->handCount[currentPlayer]--;
    #####:  795:	    card_not_discarded = 0;//Exit the loop
        -:  796:	  }
    #####:  797:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  798:	    if(DEBUG) {
        -:  799:	      printf("No estate cards in your hand, invalid choice\n");
        -:  800:	      printf("Must gain an estate if there are any\n");
        -:  801:	    }
    #####:  802:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  803:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  804:	      state->supplyCount[estate]--;//Decrement estates
    #####:  805:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  806:		isGameOver(state);
call    0 never executed
        -:  807:	      }
        -:  808:	    }
    #####:  809:	    card_not_discarded = 0;//Exit the loop
        -:  810:	  }
        -:  811:			    
        -:  812:	  else{
    #####:  813:	    p++;//Next card
        -:  814:	  }
        -:  815:	}
        -:  816:      }
        -:  817:			    
        -:  818:      else{
    #####:  819:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  820:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  821:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  822:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  823:	    isGameOver(state);
call    0 never executed
        -:  824:	  }
        -:  825:	}
        -:  826:      }
        -:  827:	    
        -:  828:      
    #####:  829:      return 0;
        -:  830:		
        -:  831:    case great_hall:
    #####:  832:		greatHallCard(state, handPos, currentPlayer);
call    0 never executed
    #####:  833:		break;
        -:  834:		
        -:  835:    case minion:
        -:  836:      //+1 action
    #####:  837:      state->numActions++;
        -:  838:			
        -:  839:      //discard card from hand
    #####:  840:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  841:			
    #####:  842:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  843:	{
    #####:  844:	  state->coins = state->coins + 2;
        -:  845:	}
        -:  846:			
    #####:  847:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  848:	{
        -:  849:	  //discard hand
    #####:  850:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  851:	    {
    #####:  852:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:	    }
        -:  854:				
        -:  855:	  //draw 4
    #####:  856:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  857:	    {
    #####:  858:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  859:	    }
        -:  860:				
        -:  861:	  //other players discard hand and redraw if hand size > 4
    #####:  862:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  863:	    {
    #####:  864:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  865:		{
    #####:  866:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  867:		    {
        -:  868:		      //discard hand
    #####:  869:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  870:			{
    #####:  871:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  872:			}
        -:  873:							
        -:  874:		      //draw 4
    #####:  875:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  876:			{
    #####:  877:			  drawCard(i, state);
call    0 never executed
        -:  878:			}
        -:  879:		    }
        -:  880:		}
        -:  881:	    }
        -:  882:				
        -:  883:	}
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case steward:
    #####:  887:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  888:	{
        -:  889:	  //+2 cards
    #####:  890:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  891:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  892:	}
    #####:  893:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  894:	{
        -:  895:	  //+2 coins
    #####:  896:	  state->coins = state->coins + 2;
        -:  897:	}
        -:  898:      else
        -:  899:	{
        -:  900:	  //trash 2 cards in hand
    #####:  901:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  902:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  903:	}
        -:  904:			
        -:  905:      //discard card from hand
    #####:  906:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  907:      return 0;
        -:  908:		
        -:  909:    case tribute:
    #####:  910:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  911:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  912:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  913:	  state->deckCount[nextPlayer]--;
        -:  914:	}
    #####:  915:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  916:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  917:	  state->discardCount[nextPlayer]--;
        -:  918:	}
        -:  919:	else{
        -:  920:	  //No Card to Reveal
        -:  921:	  if (DEBUG){
        -:  922:	    printf("No cards to reveal\n");
        -:  923:	  }
        -:  924:	}
        -:  925:      }
        -:  926:	    
        -:  927:      else{
    #####:  928:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  929:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  931:	    state->deckCount[nextPlayer]++;
    #####:  932:	    state->discard[nextPlayer][i] = -1;
    #####:  933:	    state->discardCount[nextPlayer]--;
        -:  934:	  }
        -:  935:			    
    #####:  936:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  937:	} 
    #####:  938:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:	state->deckCount[nextPlayer]--;
    #####:  941:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  943:	state->deckCount[nextPlayer]--;
        -:  944:      }    
        -:  945:		       
    #####:  946:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  947:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  948:	state->playedCardCount++;
    #####:  949:	tributeRevealedCards[1] = -1;
        -:  950:      }
        -:  951:
    #####:  952:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  953:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  954:	  state->coins += 2;
        -:  955:	}
        -:  956:		    
    #####:  957:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  958:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  959:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  960:	}
        -:  961:	else{//Action Card
    #####:  962:	  state->numActions = state->numActions + 2;
        -:  963:	}
        -:  964:      }
        -:  965:	    
    #####:  966:      return 0;
        -:  967:		
        -:  968:    case ambassador:
    #####:  969:      j = 0;		//used to check if player has enough cards to discard
        -:  970:
    #####:  971:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  972:	{
    #####:  973:	  return -1;				
        -:  974:	}
        -:  975:
    #####:  976:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  977:	{
    #####:  978:	  return -1;
        -:  979:	}
        -:  980:
    #####:  981:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  984:	    {
    #####:  985:	      j++;
        -:  986:	    }
        -:  987:	}
    #####:  988:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  989:	{
    #####:  990:	  return -1;				
        -:  991:	}
        -:  992:
        -:  993:      if (DEBUG) 
        -:  994:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  995:
        -:  996:      //increase supply count for choosen card by amount being discarded
    #####:  997:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  998:			
        -:  999:      //each other player gains a copy of revealed card
    #####: 1000:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1001:	{
    #####: 1002:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1003:	    {
    #####: 1004:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1005:	    }
        -: 1006:	}
        -: 1007:
        -: 1008:      //discard played card from hand
    #####: 1009:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1010:
        -: 1011:      //trash copies of cards returned to supply
    #####: 1012:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1013:	{
    #####: 1014:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1015:	    {
    #####: 1016:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1017:		{
    #####: 1018:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1019:		  break;
        -: 1020:		}
        -: 1021:	    }
        -: 1022:	}			
        -: 1023:
    #####: 1024:      return 0;
        -: 1025:		
        -: 1026:    case cutpurse:
    #####: 1027:		cutPurseCard(state, handPos, currentPlayer);
call    0 never executed
    #####: 1028:		break;
        -: 1029:		
        -: 1030:    case embargo: 
        -: 1031:      //+2 Coins
    #####: 1032:      state->coins = state->coins + 2;
        -: 1033:			
        -: 1034:      //see if selected pile is in play
    #####: 1035:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1036:	{
    #####: 1037:	  return -1;
        -: 1038:	}
        -: 1039:			
        -: 1040:      //add embargo token to selected supply pile
    #####: 1041:      state->embargoTokens[choice1]++;
        -: 1042:			
        -: 1043:      //trash card
    #####: 1044:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1045:      return 0;
        -: 1046:		
        -: 1047:    case outpost:
        -: 1048:      //set outpost flag
    #####: 1049:      state->outpostPlayed++;
        -: 1050:			
        -: 1051:      //discard card
    #####: 1052:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case salvager:
        -: 1056:      //+1 buy
    #####: 1057:      state->numBuys++;
        -: 1058:			
    #####: 1059:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1060:	{
        -: 1061:	  //gain coins equal to trashed card
    #####: 1062:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1063:	  //trash card
    #####: 1064:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1065:	}
        -: 1066:			
        -: 1067:      //discard card
    #####: 1068:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1069:      return 0;
        -: 1070:		
        -: 1071:    case sea_hag:
    #####: 1072:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1073:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1074:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1075:	  state->discardCount[i]++;
    #####: 1076:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1077:	}
        -: 1078:      }
    #####: 1079:      return 0;
        -: 1080:		
        -: 1081:    case treasure_map:
        -: 1082:      //search hand for another treasure_map
    #####: 1083:      index = -1;
    #####: 1084:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1085:	{
    #####: 1086:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1087:	    {
    #####: 1088:	      index = i;
    #####: 1089:	      break;
        -: 1090:	    }
        -: 1091:	}
    #####: 1092:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
        -: 1094:	  //trash both treasure cards
    #####: 1095:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1096:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1097:
        -: 1098:	  //gain 4 Gold cards
    #####: 1099:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1100:	    {
    #####: 1101:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1102:	    }
        -: 1103:				
        -: 1104:	  //return success
    #####: 1105:	  return 1;
        -: 1106:	}
        -: 1107:			
        -: 1108:      //no second treasure_map found in hand
    #####: 1109:      return -1;
        -: 1110:    }
        -: 1111:	
     4003: 1112:  return -1;
        -: 1113:}
        -: 1114:
function discardCard called 6003 returned 100% blocks executed 78%
     6003: 1115:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1116:{
        -: 1117:	
        -: 1118:  //if card is not trashed, added to Played pile 
     6003: 1119:  if (trashFlag < 1)
branch  0 taken 6003 (fallthrough)
branch  1 taken 0
        -: 1120:    {
        -: 1121:      //add card to played pile
     6003: 1122:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     6003: 1123:      state->playedCardCount++;
        -: 1124:    }
        -: 1125:	
        -: 1126:  //set played card to -1
     6003: 1127:  state->hand[currentPlayer][handPos] = -1;
        -: 1128:	
        -: 1129:  //remove card from player's hand
     6003: 1130:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 6003
        -: 1131:    {
        -: 1132:      //reduce number of cards in hand
    #####: 1133:      state->handCount[currentPlayer]--;
        -: 1134:    }
     6003: 1135:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 6003
        -: 1136:    {
        -: 1137:      //reduce number of cards in hand
    #####: 1138:      state->handCount[currentPlayer]--;
        -: 1139:    }
        -: 1140:  else 	
        -: 1141:    {
        -: 1142:      //replace discarded card with last card in hand
     6003: 1143:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1144:      //set last card to -1
     6003: 1145:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1146:      //reduce number of cards in hand
     6003: 1147:      state->handCount[currentPlayer]--;
        -: 1148:    }
        -: 1149:	
     6003: 1150:  return 0;
        -: 1151:}
        -: 1152:
function gainCard called 1 returned 100% blocks executed 70%
        1: 1153:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1154:{
        -: 1155:  //Note: supplyPos is enum of choosen card
        -: 1156:	
        -: 1157:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1158:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -: 1159:    {
    #####: 1160:      return -1;
        -: 1161:    }
        -: 1162:	
        -: 1163:  //added card for [whoseTurn] current player:
        -: 1164:  // toFlag = 0 : add to discard
        -: 1165:  // toFlag = 1 : add to deck
        -: 1166:  // toFlag = 2 : add to hand
        -: 1167:
        1: 1168:  if (toFlag == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1169:    {
    #####: 1170:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1171:      state->deckCount[player]++;
        -: 1172:    }
        1: 1173:  else if (toFlag == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1174:    {
    #####: 1175:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1176:      state->handCount[player]++;
        -: 1177:    }
        -: 1178:  else
        -: 1179:    {
        1: 1180:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1181:      state->discardCount[player]++;
        -: 1182:    }
        -: 1183:	
        -: 1184:  //decrease number in supply pile
        1: 1185:  state->supplyCount[supplyPos]--;
        -: 1186:	 
        1: 1187:  return 0;
        -: 1188:}
        -: 1189:
function updateCoins called 10 returned 100% blocks executed 82%
       10: 1190:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1191:{
        -: 1192:  int i;
        -: 1193:	
        -: 1194:  //reset coin count
       10: 1195:  state->coins = 0;
        -: 1196:
        -: 1197:  //add coins for each Treasure card in player's hand
       55: 1198:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 45
branch  1 taken 10 (fallthrough)
        -: 1199:    {
       45: 1200:      if (state->hand[player][i] == copper)
branch  0 taken 36 (fallthrough)
branch  1 taken 9
        -: 1201:	{
       36: 1202:	  state->coins += 1;
        -: 1203:	}
        9: 1204:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 9
        -: 1205:	{
    #####: 1206:	  state->coins += 2;
        -: 1207:	}
        9: 1208:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 9
        -: 1209:	{
    #####: 1210:	  state->coins += 3;
        -: 1211:	}	
        -: 1212:    }	
        -: 1213:
        -: 1214:  //add bonus
       10: 1215:  state->coins += bonus;
        -: 1216:
       10: 1217:  return 0;
        -: 1218:}
        -: 1219:
        -: 1220://ASSIGNMENT 2 - NEW FUNCTIONS RESULTING FROM CARDEFFECT() REFACTORING:
        -: 1221://4 of these 5 functions contain bugs
        -: 1222:
function adventurerCard called 2002 returned 100% blocks executed 100%
     2002: 1223:int adventurerCard(struct gameState *state, int currentPlayer, int temphand[], int drawntreasure, int cardDrawn, int z) {
     2002: 1224:	if(drawntreasure<2) {
branch  0 taken 2002 (fallthrough)
branch  1 taken 0
     2002: 1225:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1 (fallthrough)
branch  1 taken 2001
        1: 1226:			shuffle(currentPlayer, state);
call    0 returned 1
        -: 1227:		}
        -: 1228:	
     2002: 1229:		drawCard(currentPlayer, state);
call    0 returned 2002
     2002: 1230:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     2002: 1231:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 2000 (fallthrough)
branch  1 taken 2
branch  2 taken 2000 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 2000
        2: 1232:			drawntreasure++;
        -: 1233:		else {
     2000: 1234:			temphand[z]=cardDrawn;
     2000: 1235:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     2000: 1236:			z++;
        -: 1237:		}
        -: 1238:	}
        -: 1239:
     6004: 1240:	while(z-1>=0){
branch  0 taken 2000
branch  1 taken 2002 (fallthrough)
     2000: 1241:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     2000: 1242:		z=z-1;
        -: 1243:	}
        -: 1244:
     2002: 1245:	return 0;
        -: 1246:}
        -: 1247:
function cutPurseCard called 0 returned 0% blocks executed 0%
    #####: 1248:int cutPurseCard(struct gameState *state, int handPos, int currentPlayer) {
        -: 1249:	int i, j, k;
        -: 1250:
    #####: 1251:	updateCoins(currentPlayer, state, 2);
call    0 never executed
        -: 1252:
    #####: 1253:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1254:		if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1255:			for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1256:				if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####: 1257:		      		discardCard(j, i, state, 0);
call    0 never executed
    #####: 1258:		      		break;
        -: 1259:		    	}
        -: 1260:		  		
    #####: 1261:				if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####: 1262:					for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -: 1263:						if (DEBUG)
        -: 1264:						printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1265:					}	
    #####: 1266:		      		break;
        -: 1267:		    	}		
        -: 1268:			}				
        -: 1269:	    }		
        -: 1270:	}				
        -: 1271:
        -: 1272:	//discard played card from hand
    #####: 1273:	discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1274:
    #####: 1275:	return 0;
        -: 1276:}
        -: 1277:
function feastCard called 0 returned 0% blocks executed 0%
    #####: 1278:int feastCard(int choice1, struct gameState *state, int currentPlayer, int temphand[]) {
        -: 1279:	int i, x;
        -: 1280:
        -: 1281:	//gain card with cost up to 5
        -: 1282:	//Backup hand
    #####: 1283:	for (i = 0; i <= state->handCount[currentPlayer]; i++){	
branch  0 never executed
branch  1 never executed
    #####: 1284:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1285:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1286:	}
        -: 1287:	//Backup hand
        -: 1288:
        -: 1289:	//Update Coins for Buy
        -: 1290:	//updateCoins(currentPlayer, state, 5);
    #####: 1291:	x = 1;//Condition to loop on
    #####: 1292:	while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1293:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1294:			if (DEBUG)
        -: 1295:				printf("None of that card left, sorry!\n");
        -: 1296:
        -: 1297:			if (DEBUG){
        -: 1298:				printf("Cards Left: %d\n", supplyCount(choice1, state));	
        -: 1299:			}
        -: 1300:		}
    #####: 1301:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1302:			printf("That card is too expensive!\n");
call    0 never executed
        -: 1303:			
        -: 1304:			if (DEBUG){
        -: 1305:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1306:	  		}
        -: 1307:		}
        -: 1308:		else{
        -: 1309:			if (DEBUG){
        -: 1310:	    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1311:	  		}
        -: 1312:
    #####: 1313:	  		gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1314:	  		x = 0;//No more buying cards
        -: 1315:
        -: 1316:	  		if (DEBUG){
        -: 1317:	    		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1318:	  		}
        -: 1319:		}
        -: 1320:	}     
        -: 1321:
        -: 1322:	//Reset Hand
    #####: 1323:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1324:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1325:		temphand[i] = -1;
        -: 1326:	}
        -: 1327:	//Reset Hand
        -: 1328:      			
    #####: 1329:	return 0;
        -: 1330:}
        -: 1331:
function greatHallCard called 0 returned 0% blocks executed 0%
    #####: 1332:int greatHallCard(struct gameState *state, int handPos, int currentPlayer) {
        -: 1333:	//+1 Card
    #####: 1334:	drawCard(currentPlayer, state);
call    0 never executed
    #####: 1335:	drawCard(currentPlayer, state);
call    0 never executed
        -: 1336:			
        -: 1337:	//discard card from hand
    #####: 1338:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1339:      
    #####: 1340:	return 0;
        -: 1341:}
        -: 1342:
function smithyCard called 2001 returned 100% blocks executed 100%
     2001: 1343:int smithyCard(struct gameState *state, int handPos, int currentPlayer) {
        -: 1344:	int i;
        -: 1345:	
        -: 1346:	//+3 Cards
    10005: 1347:	for (i = 0; i <= 3; i++) {		
branch  0 taken 8004
branch  1 taken 2001 (fallthrough)
     8004: 1348:		drawCard(currentPlayer, state);
call    0 returned 8004
        -: 1349:	}
        -: 1350:
        -: 1351:	//discard card from hand
     2001: 1352:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 2001
        -: 1353:
     2001: 1354:	return 0;
        -: 1355:}			
        -: 1356:
        -: 1357://end of dominion.c
        -: 1358:
